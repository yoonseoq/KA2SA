<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.green.ca2sa.order.OrderMapper">

    <insert id="insOrder" useGeneratedKeys="true" keyProperty="orderId">
        insert into `order`
        (
        userId,
        cafeId,
        pickUpTime,
        memo
        )
        values
        (
        #{userId},
        #{cafeId},
        #{pickUpTime},
        #{memo}
        )
    </insert>

    <resultMap id="OrderResultMap" type="com.green.ca2sa.order.model.OrderGetRes">
        <id property="orderId" column="orderId" />
        <result property="nickName" column="nickName" />
        <result property="cafeName" column="cafeName" />
        <result property="location" column="location" />
        <result property="pickUpTime" column="pickUpTime" />
        <result property="createdAt" column="createdAt" />
        <result property="memo" column="memo" />
        <result property="orderProgress" column="orderProgress" />
        <collection property="orderMenuList" resultMap="orderMenuResultMap" />
    </resultMap>

    <resultMap id="orderMenuResultMap" type="com.green.ca2sa.order.orderMenu.model.OrderMenuDto">
        <id property="orderMenuId" column="orderMenuId" />
        <result property="orderMenuName" column="menuName" />
        <result property="price" column="price" />
        <result property="count" column="count" />
        <collection property="options" resultMap="orderMenuOptionResultMap" />
    </resultMap>

    <resultMap id="orderMenuOptionResultMap" type="com.green.ca2sa.order.orderMenu.model.OrderMenuOptionDto">
        <id property="menuOptionId" column="menuOptionId"/>
        <result property="optionName" column="optionName"/>
        <result property="addPrice" column="addPrice"/>
    </resultMap>


    <select id="getOrderList" resultMap="OrderResultMap">
        select
        a.orderId AS orderId,
        b.nickName AS nickName,
        c.cafeName AS cafeName,
        c.location AS location,
        a.pickUpTime AS pickUpTime,
        a.createdAt AS createdAt,
        a.memo AS memo,
        a.orderProgress AS orderProgress,
        d.orderMenuId AS orderMenuId,
        e.menuName AS menuName,
        e.price AS price,
        d.count AS count,
        g.menuOptionId AS menuOptionId,
        g.optionName AS optionName,
        g.addPrice AS addPrice
        from `order` a
        inner join `user` b
            on a.userId = b.userId
        inner join `cafe` c
            on c.cafeId = a.cafeId
        left join `order_menu`
            on a.orderId = d.orderId
        INNER join `menu` e
            on d.menuId = e.menuId
        left join `order_menu_option` f
            on d.orderMenuId = f.orderMenuId
        INNER join `menu_option` g
            on f.menuOptionId = g.menuOptionId
        <where>
            <if test="cafeAdminId != null">
                and a.cafeId = #{cafeAdminId}
            </if>
            <if test="signedUserId != null">
                and a.userId = #{signedUserId}
            </if>
        </where>
        order by a.orderId desc
        limit #{startIdx}, #{size}
    </select>

    <!-- 주문 취소 요청 -->
    <update id="cancelOrder">
        update `order`
            set orderProgress = 5
            where orderId = #{orderId}
            and userId = #{signedUserId}
    </update>




</mapper>
